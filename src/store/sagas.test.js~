import { asyncSaga } from './sagas';

const ok = function () {
    return new Promise((resolve, reject) => {
        setTimeout(function () {
            resolve("OK");
        }, 1000);
    });
}

const fail = function () {
    return new Promise((resolve, reject) => {
        setTimeout(function () {
            reject({ status: 400 });
        }, 1000);
    });
}

const expired = function () {
    return new Promise((resolve, reject) => {
        setTimeout(function () {
            reject({ status: 401, code: -101 });
        }, 1000);
    });
}

function* listener() {
    yield takeEvery("TEST", asyncSaga);
}

const action = "TEST";

describe('>>> Test asyncSaga', () => {

    let cnt = 0;
    
    // const lis = listener();
    beforeEach(() => {
        console.log("Test", cnt++);
    })

    it('is my first test', () => {
        const saga = asyncSaga();

        let next = saga.next(action, ok);
        console.log(next.value)
    });

    // it('+++ contains output', () => {
    //     expect(wrapper.find('input[placeholder="Output"]').prop('value')).toEqual(output)
    // });

});